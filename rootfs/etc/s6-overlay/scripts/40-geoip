#!/command/with-contenv bash
#shellcheck shell=bash disable=SC2145,SC1091,SC2154,SC2015

source /scripts/common

GEOIPDIR="/usr/share/GeoIP"
NGINXGEOIPCNF="/etc/nginx/geoip_countries.conf"

"${s6wrap[@]}" echo "Set up of GeoIP Database and corresponding nginx configuration"

#Moving geoip_countries.conf to the right place
"${s6wrap[@]}" echo "Copy geoip_countries.conf to the right place, delete old version first"
rm -f /etc/nginx/geoip_countries.conf
cp -f /root/geoip_countries.conf /etc/nginx/geoip_countries.conf

#Nothing set up in the docker-compose.yml? Then set default yes and abort the rest of the script
if [[ -z "$GEOIP_DEFAULT" ]]; then
 "${s6wrap[@]}" echo "GEOIP_DEFAULT not set, aborting further GeoIP setup."
 sed -i '/^#defaultsetting.*/a default yes;' $NGINXGEOIPCNF
 exit 0
fi

# create GeoIP directory
mkdir -p $GEOIPDIR

#create persistent backup directory
mkdir -p /run/nginx/.geoip

#delete old cached files
if [[ -f /run/nginx/.geoip/GeoIP.bckup ]] && (( $(date +"%s") - $(stat -c "%Y" /run/nginx/.geoip/GeoIP.bckup)>  90000 )); then
  "${s6wrap[@]}" echo "Found DB Backup which is older than 3 hours. Deleting"
  rm -f /run/nginx/.geoip/*.gz /run/nginx/.geoip/GeoIP.bckup
fi

#Do we still have a usable backup after deletion? Then use it
if [[ -f /run/nginx/.geoip/GeoIP.dat.gz && -f /run/nginx/.geoip/GeoIPv6.dat.gz ]]; then
  backupworks=true
  "${s6wrap[@]}" echo "Found a Backup, installing"
  [[ -f /run/nginx/.geoip/GeoIP.dat.gz ]] && cp /run/nginx/.geoip/GeoIP.dat.gz /"$GEOIPDIR"
  [[ -f /run/nginx/.geoip/GeoIPv6.dat.gz ]] && cp /run/nginx/.geoip/GeoIPv6.dat.gz /"$GEOIPDIR"
else
  backupworks=false
  "${s6wrap[@]}" echo "No Backup found, continue"
fi


# get the GeoIP databases from mailfud
if [[ "$backupworks" == "false" ]] && \
    ! curl --fail --max-time 60 -sSL -o "$GEOIPDIR"/GeoIP.dat.gz https://mailfud.org/geoip-legacy/GeoIP.dat.gz &&\
    ! curl --fail --max-time 60 -sSL -o "$GEOIPDIR"/GeoIPv6.dat.gz https://mailfud.org/geoip-legacy/GeoIPv6.dat.gz
then
  "${s6wrap[@]}" echo "Successfully downloaded DB from mailfud.org"
  geoipfail=false
else
  geoipfail=true
fi

#as there is a download limit from mailfud, backup the files to /run/nginx/.geoip/ and create a file as timestamp for further processing
if [[ "$backupworks" == "false" ]] && [[ "$geoipfail" == "false" ]]
then
"${s6wrap[@]}" echo "Backup mailfud GeoIP DB to /run/nginx/.geoip"
  cp "$GEOIPDIR"/GeoIP.dat.gz /run/nginx/.geoip
  cp "$GEOIPDIR"/GeoIPv6.dat.gz /run/nginx/.geoip
  touch /run/nginx/.geoip/GeoIP.bckup
fi

# if we couldn't get the mailfud DB and the backup is not working either, let's fall back to another database:
if [[ "$geoipfail" == "true" ]] && [[ "$backupworks" == "false" ]]
then
  centminfail=false
  "${s6wrap[@]}" echo "Couldn't download the mailfud GeoIP DB or use a backup. Now trying centminmod"
  ! curl --fail --max-time 60 -sSL -o "$GEOIPDIR"/GeoIP.dat.gz https://centminmod.com/centminmodparts/geoip-legacy/GeoIP.dat.gz && centminfail=true || true
  ! curl --fail --max-time 60 -sSL -o "$GEOIPDIR"/GeoIPv6.dat.gz https://centminmod.com/centminmodparts/geoip-legacy/GeoIPv6.dat.gz && centminfail=true || true
fi

if [[ "$geoipfail" == "true" ]] && [[ "$backupworks" == "false" ]] && [[ "$centminfail" == "false" ]]
then
  "${s6wrap[@]}" echo "Successfully downloaded DB from centminmod.com"
fi

#If nothing of the above did work out, we just use what we got through apt install
if [[ "$geoipfail" == "true" ]] && [[ "$backupworks" == "false" ]] && [[ "$centminfail" == "true" ]]
then
  "${s6wrap[@]}" echo "Couldn't retrieve any newer GeoIP databases. Your database may be out of date."
else
  "${s6wrap[@]}" echo "DB successfully installed"
fi

#Now we need to unzip what we got - if we got any
"${s6wrap[@]}" echo "Unpacking downloaded DB"
[[ -f "$GEOIPDIR"/GeoIP.dat.gz ]] && gunzip -f "$GEOIPDIR"/GeoIP.dat.gz
[[ -f "$GEOIPDIR"/GeoIPv6.dat.gz ]] && gunzip -f "$GEOIPDIR"/GeoIPv6.dat.gz

#read country codes from the variable
IFS=',' read -ra include_list <<< "$GEOIP_COUNTRIES"

#set the default GeoIP in /etc/nginx/nginx.conf - if the variable was set up in docker-compose but with unexpected content, fall back to default yes
case "$GEOIP_DEFAULT" in
  allow|ALLOW)
    "${s6wrap[@]}" echo "Default is set to allow every country but block these: ${include_list[@]}"
    sed -i '/^#defaultsetting.*/a default yes;' $NGINXGEOIPCNF
    for a in "${include_list[@]}"
    do
      sed -i "/^#countrylist.*/a $a no;" $NGINXGEOIPCNF
    done
    ;;

  block|BLOCK)
  "${s6wrap[@]}" echo "Default is set to block every country and only allow these: ${include_list[@]}"
  sed -i '/^#defaultsetting.*/a default no;' $NGINXGEOIPCNF
  for a in "${include_list[@]}"
    do
    sed -i "/^#countrylist.*/a $a yes;" $NGINXGEOIPCNF
  done
  ;;
  *)
  "${s6wrap[@]}" echo "Configuration not set or has a wrong value (use only allow or block). Defaulting to allow all"
  sed -i '/^#defaultsetting.*/a default yes;' $NGINXGEOIPCNF

  ;;
esac

# If there is a GEOIP_RESPONSECODE, then substitute it.
# Default code if omitted is 403 (Forbidden). Other codes that may be useful:
# 402 (payment required, hehe), 404 (doesn't exist), 418 (I am a teapot - used to tell requesters to go away), 410 (Gone), 500 (Internal Server Error),
# 503 (service unavailable), etc - see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
if [[ -n "$GEOIP_RESPONSECODE" ]] && [[ "$GEOIP_RESPONSECODE" -ge 100 ]]  && [[ "$GEOIP_RESPONSECODE" -le 999 ]]
then
  "${s6wrap[@]}" echo "Setting response code for blocked bots to $GEOIP_RESPONSECODE"
  # shellcheck disable=SC2016
  sed -i '/\s*if ($allowed_country = no)/{$!{N;s/\(\s*if ($allowed_country = no) {\s*\n\s*return \)[0-9]*\(.*\)/\1'"$GEOIP_RESPONSECODE"'\2/;ty;P;D;:y}}' /etc/nginx/sites-available/default >/dev/null 2>&1
fi

"${s6wrap[@]}" echo "Finished setting up GeoIP"

exit
