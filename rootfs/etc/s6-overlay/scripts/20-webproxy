#!/command/with-contenv bash
#shellcheck shell=bash disable=SC2174,SC1091,SC2154,SC2015

source /scripts/common

"${s6wrap[@]}" echo "Initial setup -- installing NXINX web service"

# create run directory. This is where the locations.conf file will be located.
# Create the correct ownership and permissions for the /var/log/nginx directory:
adduser -U www-data >/dev/null 2>&1 || true
mkdir -p /var/log/nginx
mkdir -p /run/nginx/html
mkdir -p /run/nginx/.htaccess
chmod a+rwx /var/log/nginx
chown www-data:www-data /var/log/nginx
cp -n /root/locations.conf.example /run/nginx
cp -n /root/index.html /run/nginx/html
chmod a+rwx /run/nginx /run/nginx/html
chmod a+rw /run/nginx/*
chmod a+rw /run/nginx/html/*
chmod go-rwx /run/nginx/.htaccess
chown www-data:www-data /run/nginx/.htaccess

# create the logging directory if it doesn't already exist
mkdir -p -m 777 /var/log/nginx
touch /var/log/nginx/access.log
touch /var/log/nginx/error.log
chmod a+rw /var/log/nginx/access.log /var/log/nginx/error.log

# auto-create the locations.conf file if $AUTOGENERATE is set to yes
if chk_enabled "$AUTOGENERATE"; then
    "${s6wrap[@]}" echo "Auto-generating locations.conf file"
    # back up any existing locations.conf file:
    [[ -f /run/nginx/locations.conf ]] && mv -f /run/nginx/locations.conf "/run/nginx/locations.conf.bkup-$(date +%y%m%d%H%M%S)"

    # keep only the newest 10 backups:
    org="$(shopt -p nullglob)" || true   # save current nullglob setting
    shopt -s nullglob           # set nullglob to avoid ls errors when no backups are present
    # shellcheck disable=SC2010
    ls -tp /run/nginx/locations.conf.bkup-* | grep -v '/$' | tail -n +11 | xargs -d '\n' -r rm --   # remove any backups older than the newest 10
    if [[ -n "$org" ]]; then $org; fi        # restore the original shopt nullglob setting

    # configure the locations.conf file:
    # first read the REVPROXY and REDIRECT environment variables into an array:

    readarray -d ',' -t proxy_array <<< "$REVPROXY"
    readarray -d ',' -t redir_array <<< "$REDIRECT"
    #
    # Loop through each of the entries in $redir_array:
    for proxy in "${redir_array[@]}"; do
        location="${proxy%%|*}"       # all chars up to the first "|"
        location="${location//[[:space:]]}"     # strip any spaces
        proxy="${proxy#*|}"           # all chars after the first "|"
        destination="${proxy%%|*}"    # all chars up to the (now) first "|"
        destination="${destination//[[:space:]]}" # strip any spaces
        creds="${proxy#*|}"           # now there's only user1|pass1|user2|pass2 etc left
        grep '|' <<< "$creds" >/dev/null 2>&1 || creds=""   # If there are no '|' in the string, there is no user/pass
        #debug: echo "Loc: ${location#* } - Proxy: $destination - Creds: $creds"

        if [[ -z "$location" ]] || [[ -z "$destination" ]]; then
            "${s6wrap[@]}" echo "WARNING: Skipping empty location or destination for REDIRECT $location:$destination"
            continue;
        fi

        if [[ -n "$creds" ]]; then 
            "${s6wrap[@]}" echo "WARNING: Auth credentials not supported REDIRECT ($location:$destination). Implemented without authentications"
        fi

        # fix prefixes and suffixes if necessary:
        [[ "${location:0:1}" != "/" ]] && location="/$location" || true
        [[ "${destination:0:2}" == "//" ]] && destination="http:$destination" || true
        [[ "${destination:0:4}" != "http" ]] && destination="http://$destination" || true
        [[ "${location:0:2}" == "/=" ]] && location="= ${location:2}" || true

        # Now print the location entry:
        {   printf "location %s {\n" "$location" 
            printf "    return 301 %s;\n" "$destination"
            printf "}\n\n"
        } >> /run/nginx/locations.conf

    done

    # now loop through the Proxy array and create location elements for each entry:
    for proxy in "${proxy_array[@]}"; do
        location="${proxy%%|*}"       # all chars up to the first "|"
        location="${location//[[:space:]]}"     # strip any spaces
        while [[ "${location:0:1}" == "/" ]]; do location="${location:1}"; done # strip any / from the front
        while [[ "${location: -1}" == "/" ]]; do location="${location:0: -1}"; done # strip any / from the back
        # location="${location///}"     <-- wayyy too aggressive - screws up the locations.conf entry # strip any '/'
        proxy="${proxy#*|}"           # all chars after the first "|"
        destination="${proxy%%|*}"    # all chars up to the (now) first "|"
        destination="${destination//[[:space:]]}" # strip any spaces
        creds="${proxy#*|}"           # now there's only user1|pass1|user2|pass2 etc left
        grep '|' <<< "$creds" >/dev/null 2>&1 || creds=""   # If there are no '|' in the string, there is no user/pass
        #debug: echo "Loc: ${location#* } - Proxy: $destination - Creds: $creds"

        if [[ -z "$location" ]] || [[ -z "$destination" ]]; then
            "${s6wrap[@]}" echo "WARNING: Skipping empty location or destination for REDIRECT $location:$destination"
            continue;
        fi

        # If there are creds and AUTH=ON, then set `auth_basic` to a string. If not, it's `off`.
        if [[ -n "$creds" ]] || ( chk_enabled "${LOCAL_CREDS_ALL_REVPROXIES}" && [[ -n "${LOCAL_CREDS}" ]] ) && [[ "${AUTH,,}" == "on" ]]; then
            basic_auth="\"Authorization Required\""
            abuf="auth_basic_user_file"
        else
            basic_auth="off"
            abuf="# auth_basic_user_file"
        fi

        # fix prefixes and suffixes if necessary:
        [[ "${destination:0:4}" != "http" ]] && destination="http://$destination"
        [[ "${destination:0:2}" == "//" ]] && destination="http:$destination"
        [[ "${destination: -1}" != "/" ]] && destination="$destination/"

        # Now print the location entry:
        {   printf "location %s {\n" "/$location/"
            printf "    auth_basic %s;\n" "$basic_auth"
            printf "    %s /run/nginx/.htaccess/.htpasswd-%s;\n" "$abuf" "${location///}"
            printf "    proxy_pass %s;\n" "$destination"
            printf "    proxy_http_version 1.1;\n"

            # Additional line to catch redirects; suggested by @wiedehopf:
            # removed again after discussions
            # printf "    proxy_redirect ~^(/|http://[^/]*/)(.*) %s\$2;\n" "$location" >> /run/nginx/locations.conf
            printf "    proxy_redirect / /%s/;\n" "$location"
            # close off the location entry:
            printf "}\n\n"
          }  >> /run/nginx/locations.conf
        touch "/run/nginx/.htaccess/.htpasswd-${location///}" # make sure that the passwd file exists even if it's empty or not used
    done

    # Finally add the default index files to this configuration:
    # Add index.php to the list if you are using PHP
    printf "index index.html index.htm index.php index.nginx-debian.html;\n"  >> /run/nginx/locations.conf
    chmod a+r /run/nginx/locations.conf

elif [[ ! -f /run/nginx/locations.conf ]]; then
    # No locations.conf is found, and none is generated either. Complain and stop the container:
    "${s6wrap[@]}" echo "-------------------------------------------------"
    "${s6wrap[@]}" echo "|           STOP ! You must either:             |"
    "${s6wrap[@]}" echo "| set AUTOGENERATE=ON in docker-compose.yml     |"
    "${s6wrap[@]}" echo "| or provide a well-formed locations.conf file  |"
    "${s6wrap[@]}" echo "| Please do so and then restart the container.  |"
    "${s6wrap[@]}" echo "-------------------------------------------------"

    [[ -z "$DEBUG" ]] && exit 1 || sleep infinity
else
    "${s6wrap[@]}" echo "Using user-provided locations.conf file"
fi

# Handle proxy_read_timeout:
if [[ -n "$PROXY_READ_TIMEOUT" ]]; then
    if chk_enabled "$PROXY_READ_TIMEOUT"; then PROXY_READ_TIMEOUT="3600"; fi
    sed -i 's|^\(\s*\)### \(proxy_read_timeout\s\+\)tttt\(;\s*\)|\1\2'"$PROXY_READ_TIMEOUT"'\3|g' /etc/nginx/sites-available/default
fi

# now enable default:
ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

# set logging to what VERBOSELOG says. Default is off, "ON" means to stdout, "FILE" means to access.log/error.log file in external volume
if chk_enabled "${VERBOSELOG}" \
    || [[ "${VERBOSELOG,,}" == "file" ]] \
    || chk_enabled "$IPMAPS" \
    || chk_enabled "$IPTABLES_BLOCK" \
    || ( [[ -n "$ACCESS_REPORT_PAGE" ]] \
    && ! chk_disabled "$ACCESS_REPORT_PAGE" ); then
  "${s6wrap[@]}" echo "Enabled HTTP logging"
  sed -i 's|\(^\s*access_log\).*|\1 /var/log/nginx/access.log ;|' /etc/nginx/nginx.conf
  sed -i 's|\(^\s*error_log\).*|\1 /var/log/nginx/error.log ;|' /etc/nginx/nginx.conf
else
  "${s6wrap[@]}" echo "HTTP logging is disabled"
fi

exit 0
